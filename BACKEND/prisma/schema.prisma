// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" 
  url      = env("DATABASE_URL")
}


model User {
  id      String @id @default(uuid()) @db.Uuid
  name      String
  role_id   String   @db.Uuid
  email     String   @unique
  phone     String?
  address   String?
  clerk_id  String   @unique

  role      Role     @relation(fields: [role_id], references: [id])
  reviews   Review[]
  orders    Order_Details[]
  payments  Payment[]
  reservations Reservation[]
}

model Table {
   id      String @id @default(uuid()) @db.Uuid
  number      Int      @unique
  capacity    Int
  available   Boolean

  reservations Reservation[]
}

model Role {
  id      String @id @default(uuid()) @db.Uuid
  role_name String   @unique

  users     User[]
}

model Review {
  id      String @id @default(uuid()) @db.Uuid
  user_id    String  @db.Uuid
  menu_id    String  @db.Uuid
  stars      Int
  comments   String?
  created_at DateTime @default(now())

  user       User     @relation(fields: [user_id], references: [id])
  menu       Menu     @relation(fields: [menu_id], references: [id])
}

model Menu {
  id      String @id @default(uuid()) @db.Uuid
  name        String   
  description String?
  price       Decimal
  category_id String?  @db.Uuid
  image       String?

  category    Category? @relation(fields: [category_id], references: [id])
  reviews     Review[]
  nutrients   Nutrients?
  item_orders Item_Order_Details[]
}

model Item_Order_Details {
  id      String @id @default(uuid()) @db.Uuid
  order_details_id String  @db.Uuid
  menu_id          String  @db.Uuid
  quantity         Int

  order_details    Order_Details @relation(fields: [order_details_id], references: [id])
  menu             Menu          @relation(fields: [menu_id], references: [id])
}

model Category {
  id      String @id @default(uuid()) @db.Uuid
  category_name String @unique

  menus        Menu[]
}

model Nutrients {
  id      String @id @default(uuid()) @db.Uuid
  menu_id        String   @unique  @db.Uuid
  calories       Decimal
  protein        Decimal
  carbohydrates  Decimal
  fats           Decimal
  fiber          Decimal
  sugar          Decimal
  sodium         Decimal

  menu        Menu     @relation(fields: [menu_id], references: [id])
}

model Order_Details {
  id      String @id @default(uuid()) @db.Uuid
  payment_id  String  @db.Uuid
  total_price Decimal
  user_id     String  @db.Uuid
  date        DateTime @default(now())
  status      String   @default("PENDING")

  payment     Payment  @relation(fields: [payment_id], references: [id])
  user        User     @relation(fields: [user_id], references: [id])
  items       Item_Order_Details[]
}

model Reservation {
  id      String @id @default(uuid()) @db.Uuid
  user_id         String  @db.Uuid
  num_of_people   Int
  table_id        String?  @db.Uuid
  status          String   @default("PENDING")
  location        String
  reservationDateTime DateTime
  created_at      DateTime @default(now())

  user            User     @relation(fields: [user_id], references: [id])
  table           Table?   @relation(fields: [table_id], references: [id])
}


model Payment {
  id      String @id @default(uuid()) @db.Uuid
  user_id     String   @db.Uuid
  stripe_id   String?  @unique  
  amount      Decimal
  currency    String
  method      String
  status      String   @default("PENDING")
  created_at  DateTime @default(now())

  user        User     @relation(fields: [user_id], references: [id])
  orders      Order_Details[]
}


